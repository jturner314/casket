#!/bin/bash

# Copyright (C) 2015  Jim Turner <casket@turner.link>
#
# This file is part of Casket.
#
# Casket is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# Casket is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Casket. If not, see <http://www.gnu.org/licenses/>.

set -e

message() {
    echo "$@" >&2
}

fail() {
    message "Error:" "$@"
    exit 1
}

usage() {
    message "usage:"
    message "  casket create <path> <size>"
    message "  casket open <path> [mountpoint]"
    message "  casket close <name>"
    message "  casket list"
    message "  casket status"
    message
    message "<path>        path to casket file"
    message "<size>        size of casket file in MiB"
    message "[mountpoint]  optional mount point for open casket (default: \"<path>_mounted\")"
    message "<name>        basename of an open casket file, or 'all' for all opened caskets"
}

list() {
    if [[ "$#" -gt 0 ]]; then
        usage
        exit 1
    fi

    # Iterate over mapper devices
    local mapper_path
    for mapper_path in /dev/mapper/casket_*; do
        # Check that the device exists
        if [[ -e "${mapper_path}" ]]; then
            # Print the user-friendly name (without initial 'casket_')
            local mapper_name="$(basename "${mapper_path}")"
            echo "${mapper_name#casket_}"
        fi
    done
}

create() {
    if [[ "$#" -lt 2 ]]; then
        usage
        exit 1
    fi

    local -r casket_path="$1"
    local -r name="$(basename "${casket_path}")"
    local -r mapper_name="casket_${name}"
    local -r mapper_path="/dev/mapper/${mapper_name}"
    local -r casket_size="$2"

    # Make sure the casket does not already exist
    if [[ -e "${casket_path}" ]]; then
        fail "A file already exists there."
    fi

    # Make sure a casket with that name is not already open
    if [[ -e "${mapper_path}" ]]; then
        fail "A casket with that basename is already open."
    fi

    # Create file and set permissions
    touch "${casket_path}"
    chmod 0600 "${casket_path}"

    # Fill with random data
    message "Initializing the container with random data."
    message "This may take a while..."
    dd if=/dev/urandom bs=1048576 count="${casket_size}" of="${casket_path}"

    # Mount as loop device
    local -r lo_device="$(sudo losetup --show --find "${casket_path}")"

    # Format LUKS container
    sudo cryptsetup luksFormat --cipher aes-xts-plain64 --key-size 512 \
         --hash sha512 --iter-time 5000 --use-random --verify-passphrase \
         "${lo_device}"

    # Open LUKS container
    sudo cryptsetup luksOpen "${lo_device}" "${mapper_name}"

    # Create filesystem
    sudo mkfs.ext4 -L "${name}" "${mapper_path}"

    # Close LUKS container
    sudo cryptsetup luksClose "${mapper_name}"

    # Detach casket from loop device
    sudo losetup --detach "${lo_device}"

    # Indicate completion to user
    message "Successfully created casket at '${casket_path}'."
}

open() {
    # Parse arguments
    if [[ "$#" -lt 1 ]]; then
        usage
        exit 1
    fi
    local -r casket_path="$1"
    if [[ -n "$2" ]]; then
        local -r mountpoint="$2"
    else
        local -r mountpoint="${casket_path}_mounted"
    fi

    # Assign necessary variables
    local -r name="$(basename "${casket_path}")"
    local -r mapper_name="casket_${name}"
    local -r mapper_path="/dev/mapper/${mapper_name}"
    local -r user_and_group="$(id -u):$(id -g)"

    # Make sure the casket_path is a file, not a directory
    if [[ ! -f "${casket_path}" ]]; then
        fail "The specified path is not a file."
    fi

    # Make sure a casket with that name is not already open
    if [[ -e "${mapper_path}" ]]; then
        fail "A casket with that basename is already open."
    fi

    # Make sure that the mount point does not already exist
    if [[ -e "${mountpoint}" ]]; then
        fail "The mount point '${mountpoint}' already exists."
    fi

    # Mount as loop device
    local -r lo_device="$(sudo losetup --show --find "${casket_path}")"

    # Open LUKS container
    sudo cryptsetup luksOpen "${lo_device}" "${mapper_name}"

    # Fsck the file system
    sudo fsck -a -C "${mapper_path}"

    # Mount filesystem
    sudo mount -o rw,noatime,nodev,nodiratime,nosuid,x-mount.mkdir=0700 \
         "${mapper_path}" "${mountpoint}"
    sudo chmod 0700 "${mountpoint}"
    sudo chown "${user_and_group}" "${mountpoint}"

    # Inform user
    message "Casket at '${casket_path}' is mounted at '${mountpoint}'."
}

close() {
    # Initialize variables
    if [[ -n "$1" ]]; then
        local -r casket_to_close="$1"
    else
        usage
        exit 1
    fi
    local found_at_least_one=0

    # Iterate over all mapper devices on loop devices
    local sys_path
    for sys_path in /sys/devices/virtual/block/loop*/holders/*/dm/name; do
        if [[ -f "${sys_path}" ]]; then
            local lo_name="$(echo "${sys_path}" | cut --delimiter=/ --fields=6)"
            local lo_device="/dev/${lo_name}"
            local mapper_name="$(cat "${sys_path}")"
            local mapper_path="/dev/mapper/${mapper_name}"
            local mountpoint="$(findmnt --list --noheadings --output TARGET --source "${mapper_path}")"

            # Check if the device is a casket
            if [[ "${mapper_name}" =~ ^casket_ ]]; then
                # Check that the casket matches the command line argument
                if [[ "${casket_to_close}" == "all" ]] || [[ "casket_${casket_to_close}" == "${mapper_name}" ]]; then
                    found_at_least_one=1

                    # Unmount filesystem
                    sudo umount "${mapper_path}"
                    rmdir "${mountpoint}"

                    # Close LUKS container
                    sudo cryptsetup luksClose "${mapper_name}"

                    # Delete the loop device if it's still present
                    if [[ -e "${lo_device}" ]]; then
                        sudo losetup --detach "${lo_device}"
                    fi

                    message "Closed '${mapper_name#casket_}'."
                fi
            fi
        fi
    done

    # Warn the user if no matching caskets were found
    if [[ "${found_at_least_one}" -eq 0 ]]; then
        fail "Could not find any matching caskets."
    fi
}

status() {
    echo "Mounted casket filesystems (unmount with 'sudo umount <path>'):"
    find /dev/mapper -name 'casket_*' -exec findmnt --list --noheadings --output TARGET --source {} \; || true
    echo

    echo "Open casket containers (close with 'sudo cryptsetup luksClose <name>'):"
    find /dev/mapper -name 'casket_*' -exec basename {} \; || true
    echo

    echo "Open loop devices and backing files (detach with 'sudo losetup -d <device>'):"
    sudo losetup --all --list --output NAME,BACK-FILE --noheadings
    echo
}

main() {
    if [[ "$#" -lt 1 ]]; then
        usage
        exit 1
    fi

    local -r subcommand="$1"
    shift
    case "${subcommand}" in
        help)
            usage "$@"
            ;;
        create)
            create "$@"
            ;;
        open)
            open "$@"
            ;;
        close)
            close "$@"
            ;;
        list)
            list "$@"
            ;;
        status)
            status "$@"
            ;;
        *)
            usage "$@"
            exit 1
            ;;
    esac
}

main "$@"
